AudioWorkletProcessor.prototype._a1=function(){this._b1=true;this.port.onmessage=(_c1)=>{if(_c1.data==="kill")this._b1=false;};};class _d1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._a1();}process(_e1,_f1,parameters){const input=_e1[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _g1=input[c];for(let _h1=0;_h1<_g1.length;++_h1){const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];
_f1[_i1][c][_h1]=_g1[_h1];}}return this._b1;}}class _j1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._a1();}process(_e1,_f1,parameters){const _k1=_e1[0];const _l1=_e1[1];const output=_f1[0];const gain=parameters.gain;for(let c=0;c<_l1.length;++c){const _g1=_l1[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1)_m1[_h1]=_g1[_h1];}for(let c=0;c<_k1.length;++c){const _g1=_k1[c];const _m1=output[c];
for(let _h1=0;_h1<_g1.length;++_h1){const _n1=(gain[_h1]!==undefined)?gain[_h1]:gain[0];_m1[_h1]+=_g1[_h1]*_n1;}}return this._b1;}}registerProcessor("audio-bus-input",_d1);registerProcessor("audio-bus-output",_j1);class _o1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _p1=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];this._s1=new Float32Array(_r1);this._t1=new Uint32Array(_r1);}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){_m1[_h1]=_g1[_h1];if(this._t1[c]===0)this._s1[c]=_g1[_h1];const _u1=(factor[_h1]!==undefined)?factor[_h1]:factor[0];++this._t1[c];this._t1[c]%=_u1;const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];if(_i1>0.0){continue;}let _v1=this._s1[c];const _n1=(gain[_h1]!==undefined)?gain[_h1]:gain[0];_v1*=_n1;_v1=Math.max(Math.min(_v1,
1.0),-1.0);const _w1=(resolution[_h1]!==undefined)?resolution[_h1]:resolution[0];const max=(_v1>0.0)?_o1._p1[_w1]-1:_o1._p1[_w1];_v1=Math.round(_v1*max)/max;const _x1=(mix[_h1]!==undefined)?mix[_h1]:mix[0];_m1[_h1]*=(1.0-_x1);_m1[_h1]+=(_v1*_x1);}}return this._b1;}}registerProcessor("bitcrusher-processor",_o1);class _y1{constructor(_z1=1e-3){this.setTime(_z1);}setTime(_z1){this._A1=Math.exp(-1/(_z1*sampleRate));}process(_B1,_C1){return _B1+this._A1*(_C1-_B1);}}class _D1{constructor(_E1,_F1){this._G1=new _y1(_E1);
this._H1=new _y1(_F1);this._I1=_E1;this._J1=_F1;}_K1(_z1){if(_z1===this._I1)return;this._G1.setTime(_z1);this._I1=_z1;}_L1(_z1){if(_z1===this._J1)return;this._H1.setTime(_z1);this._J1=_z1;}process(_B1,_C1){if(_B1>_C1)return this._G1.process(_B1,_C1);else return this._H1.process(_B1,_C1);}}class _M1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_N1){super();this._a1();const _G1=_M1.parameterDescriptors.find(_O1=>_O1.name==="attack");const _H1=_M1.parameterDescriptors.find(_O1=>_O1.name==="release");
this._P1=new _D1(_G1.defaultValue,_H1.defaultValue);this._Q1=0;}process(_R1,_S1,_T1){const input=_R1[0];const output=_S1[0];const bypass=_T1.bypass;const ingain=_T1.ingain;const outgain=_T1.outgain;const threshold=_T1.threshold;const ratio=_T1.ratio;const attack=_T1.attack;const release=_T1.release;if(input.length===0)return this._b1;for(let _h1=0;_h1<input[0].length;++_h1){let frame=input.map(_U1=>_U1[_h1]);output.forEach((_U1,_V1)=>{_U1[_h1]=frame[_V1];});const _W1=(ingain[_h1]!==undefined)?ingain[_h1]:ingain[0];
frame=frame.map(_X1=>_X1*=_W1);const rect=frame.map(_X1=>Math.abs(_X1));const max=Math.max(...rect);const _Y1=_Z1(max);const __1=(threshold[_h1]!==undefined)?threshold[_h1]:threshold[0];const _02=_Z1(__1);const _12=Math.max(0,_Y1-_02);const _G1=(attack[_h1]!==undefined)?attack[_h1]:attack[0];const _H1=(release[_h1]!==undefined)?release[_h1]:release[0];this._P1._K1(_G1);this._P1._L1(_H1);this._Q1=this._P1.process(_12,this._Q1);const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];if(_i1>0)continue;const _w1=(ratio[_h1]!==undefined)?ratio[_h1]:ratio[0];
const _22=(this._Q1/_w1)-this._Q1;const _n1=_32(_22);frame=frame.map(_X1=>_X1*=_n1);const _42=(outgain[_h1]!==undefined)?outgain[_h1]:outgain[0];frame=frame.map(_X1=>_X1*=_42);output.forEach((_U1,_V1)=>{_U1[_h1]=frame[_V1];});}return this._b1;}}function _Z1(_52){return 20*Math.log10(_52);}function _32(_52){return Math.pow(10,_52/20);}registerProcessor("compressor-processor",_M1);class _62 extends AudioWorkletProcessor{static _72=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_62._72},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];const _82=(_62._72*sampleRate)+1;this.buffer=new Array(_r1);this._92=new Uint32Array(_r1);for(let c=0;c<_r1;++c)this.buffer[c]=new Float32Array(_82);
}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){_m1[_h1]=_g1[_h1];const __1=(time[_h1]!==undefined)?time[_h1]:time[0];const _a2=this._b2(c,__1);const _u1=(feedback[_h1]!==undefined)?feedback[_h1]:feedback[0];const _c2=_g1[_h1]+(_a2*_u1);this.write(c,_c2);const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];
if(_i1>0.0){continue;}const _x1=(mix[_h1]!==undefined)?mix[_h1]:mix[0];_m1[_h1]*=(1-_x1);_m1[_h1]+=(_a2*_x1);}}return this._b1;}_b2(_d2,_z1){const _e2=_z1*sampleRate;let _f2=(this._92[_d2]-~~_e2);let _g2=(_f2-1);while(_f2<0)_f2+=this.buffer[_d2].length;while(_g2<0)_g2+=this.buffer[_d2].length;const frac=_e2-~~_e2;const _h2=this.buffer[_d2][_f2];const _i2=this.buffer[_d2][_g2];return _h2+(_i2-_h2)*frac;}write(_d2,_j2){++this._92[_d2];this._92[_d2]%=this.buffer[_d2].length;this.buffer[_d2][this._92[_d2]]=_j2;
}}registerProcessor("delay-processor",_62);class _k2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._a1();}process(_l2,_m2,_n2){const input=_l2[0];const _o2=_m2[0];const _p2=_m2[1];for(let c=0;c<input.length;++c){const _g1=input[c];const _q2=_o2[c];const _r2=_p2[c];for(let _h1=0;_h1<_g1.length;++_h1){_q2[_h1]=_g1[_h1];_r2[_h1]=_g1[_h1];}}return this._b1;}}class _s2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._a1();}process(_l2,_m2,_n2){const _k1=_l2[0];const _l1=_l2[1];const output=_m2[0];const bypass=_n2.bypass;for(let c=0;c<_l1.length;++c){const _t2=_k1[c];const _u2=_l1[c];const _m1=output[c];for(let _h1=0;_h1<_t2.length;++_h1){const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];if(_i1>0){_m1[_h1]=_u2[_h1];}else {_m1[_h1]=_t2[_h1];}}}return this._b1;}}registerProcessor("eq-input",_k2);registerProcessor("eq-output",_s2);class _v2 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._a1();}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){_m1[_h1]=_g1[_h1];const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];
if(_i1>0.0){continue;}const _n1=(gain[_h1]!==undefined)?gain[_h1]:gain[0];_m1[_h1]*=_n1;}}return this._b1;}}registerProcessor("gain-processor",_v2);class _w2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _x2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_x2),minValue:10.0,maxValue:_x2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];this._y2=0;this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=new Float32Array(_r1);this._E2=new Float32Array(_r1);this._F2=new Float32Array(_r1);this._G2=new Float32Array(_r1);this._H2=-1;this._I2=-1;this._J2=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _K2=(freq.length===1&&q.length===1&&gain.length===1);if(_K2)this._L2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){if(_K2===false){const _u1=(freq[_h1]!==undefined)?freq[_h1]:freq[0];const _M2=(q[_h1]!==undefined)?q[_h1]:q[0];const _n1=(gain[_h1]!==undefined)?gain[_h1]:gain[0];this._L2(_u1,_M2,_n1);}const _N2=this._A2*_g1[_h1]+this._B2*this._D2[c]+this._C2*this._E2[c]-this._y2*this._F2[c]-this._z2*this._G2[c];this._E2[c]=this._D2[c];
this._D2[c]=_g1[_h1];this._G2[c]=this._F2[c];this._F2[c]=_N2;const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];_m1[_h1]=(_i1>0)?_g1[_h1]:_N2;}}return this._b1;}_L2(_O2,_P2,_Q2){if(_O2===this._H2&&_P2===this._I2&&_Q2===this._J2)return;const _R2=2*Math.PI*_O2/sampleRate;const _S2=Math.cos(_R2);const _T2=Math.sqrt(_Q2);const _U2=_T2+1;const _V2=_T2-1;const _W2=_U2*_S2;const _X2=_V2*_S2;const _Y2=_U2-_X2;const _Z2=_U2+_X2;const alpha=Math.sin(_R2)/(2*_P2);const __2=(2*Math.sqrt(_T2)*alpha);const _03=_Y2+__2;
const _y2=2*(_V2-_W2);const _z2=_Y2-__2;const _A2=_T2*(_Z2+__2);const _B2=-2*_T2*(_V2+_W2);const _C2=_T2*(_Z2-__2);this._y2=_y2/_03;this._z2=_z2/_03;this._A2=_A2/_03;this._B2=_B2/_03;this._C2=_C2/_03;this._H2=_O2;this._I2=_P2;this._J2=_Q2;}}registerProcessor("hi-shelf-processor",_w2);class _13 extends AudioWorkletProcessor{static get parameterDescriptors(){const _23=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_23),minValue:10.0,maxValue:_23},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];this._y2=0;this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=new Float32Array(_r1);this._E2=new Float32Array(_r1);this._F2=new Float32Array(_r1);this._G2=new Float32Array(_r1);this._33=-1;this._I2=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _K2=(cutoff.length===1&&q.length===1);if(_K2)this._L2(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){if(_K2===false){const c=(cutoff[_h1]!==undefined)?cutoff[_h1]:cutoff[0];const _M2=(q[_h1]!==undefined)?q[_h1]:q[0];this._L2(c,_M2);}const _N2=this._A2*_g1[_h1]+this._B2*this._D2[c]+this._C2*this._E2[c]-this._y2*this._F2[c]-this._z2*this._G2[c];this._E2[c]=this._D2[c];this._D2[c]=_g1[_h1];this._G2[c]=this._F2[c];
this._F2[c]=_N2;const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];_m1[_h1]=(_i1>0)?_g1[_h1]:_N2;}}return this._b1;}_L2(_43,_P2){if(_43===this._33&&_P2===this._I2)return;const _R2=2*Math.PI*_43/sampleRate;const alpha=Math.sin(_R2)/(2*_P2);const _S2=Math.cos(_R2);const _03=1+alpha;const _y2=-2*_S2;const _z2=1-alpha;const _A2=(1+_S2)/2;const _B2=-1-_S2;const _C2=(1+_S2)/2;this._y2=_y2/_03;this._z2=_z2/_03;this._A2=_A2/_03;this._B2=_B2/_03;this._C2=_C2/_03;this._33=_43;this._I2=_P2;}}registerProcessor("hpf2-processor",
_13);class _53 extends AudioWorkletProcessor{static get parameterDescriptors(){const _x2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_x2),minValue:10.0,maxValue:_x2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];
this._y2=0;this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=new Float32Array(_r1);this._E2=new Float32Array(_r1);this._F2=new Float32Array(_r1);this._G2=new Float32Array(_r1);this._H2=-1;this._I2=-1;this._J2=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _K2=(freq.length===1&&q.length===1&&gain.length===1);if(_K2)this._L2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){if(_K2===false){const _u1=(freq[_h1]!==undefined)?freq[_h1]:freq[0];const _M2=(q[_h1]!==undefined)?q[_h1]:q[0];const _n1=(gain[_h1]!==undefined)?gain[_h1]:gain[0];this._L2(_u1,_M2,_n1);}const _N2=this._A2*_g1[_h1]+this._B2*this._D2[c]+this._C2*this._E2[c]-this._y2*this._F2[c]-this._z2*this._G2[c];this._E2[c]=this._D2[c];this._D2[c]=_g1[_h1];this._G2[c]=this._F2[c];this._F2[c]=_N2;const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];
_m1[_h1]=(_i1>0)?_g1[_h1]:_N2;}}return this._b1;}_L2(_O2,_P2,_Q2){if(_O2===this._H2&&_P2===this._I2&&_Q2===this._J2)return;const _R2=2*Math.PI*_O2/sampleRate;const _S2=Math.cos(_R2);const _T2=Math.sqrt(_Q2);const _U2=_T2+1;const _V2=_T2-1;const _W2=_U2*_S2;const _X2=_V2*_S2;const _Y2=_U2-_X2;const _Z2=_U2+_X2;const alpha=Math.sin(_R2)/(2*_P2);const __2=(2*Math.sqrt(_T2)*alpha);const _03=_Z2+__2;const _y2=-2*(_V2+_W2);const _z2=_Z2-__2;const _A2=_T2*(_Y2+__2);const _B2=2*_T2*(_V2-_W2);const _C2=_T2*(_Y2-__2);this._y2=_y2/_03;
this._z2=_z2/_03;this._A2=_A2/_03;this._B2=_B2/_03;this._C2=_C2/_03;this._H2=_O2;this._I2=_P2;this._J2=_Q2;}}registerProcessor("lo-shelf-processor",_53);class _63 extends AudioWorkletProcessor{static get parameterDescriptors(){const _23=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_23),minValue:10.0,maxValue:_23},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];this._y2=0;this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=new Float32Array(_r1);this._E2=new Float32Array(_r1);this._F2=new Float32Array(_r1);this._G2=new Float32Array(_r1);this._33=-1;this._I2=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _K2=(cutoff.length===1&&q.length===1);if(_K2)this._L2(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){if(_K2===false){const c=(cutoff[_h1]!==undefined)?cutoff[_h1]:cutoff[0];const _M2=(q[_h1]!==undefined)?q[_h1]:q[0];this._L2(c,_M2);}const _N2=this._A2*_g1[_h1]+this._B2*this._D2[c]+this._C2*this._E2[c]-this._y2*this._F2[c]-this._z2*this._G2[c];this._E2[c]=this._D2[c];this._D2[c]=_g1[_h1];this._G2[c]=this._F2[c];this._F2[c]=_N2;const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];_m1[_h1]=(_i1>0)?_g1[_h1]:_N2;
}}return this._b1;}_L2(_43,_P2){if(_43===this._33&&_P2===this._I2)return;const _R2=2*Math.PI*_43/sampleRate;const alpha=Math.sin(_R2)/(2*_P2);const _S2=Math.cos(_R2);const _03=1+alpha;const _y2=-2*_S2;const _z2=1-alpha;const _A2=(1-_S2)/2;const _B2=1-_S2;const _C2=(1-_S2)/2;this._y2=_y2/_03;this._z2=_z2/_03;this._A2=_A2/_03;this._B2=_B2/_03;this._C2=_C2/_03;this._33=_43;this._I2=_P2;}}registerProcessor("lpf2-processor",_63);class _73 extends AudioWorkletProcessor{static get parameterDescriptors(){const _x2=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_x2),minValue:10.0,maxValue:_x2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];this._y2=0;this._z2=0;this._A2=0;this._B2=0;this._C2=0;this._D2=new Float32Array(_r1);this._E2=new Float32Array(_r1);
this._F2=new Float32Array(_r1);this._G2=new Float32Array(_r1);this._H2=-1;this._I2=-1;this._J2=-1;}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _K2=(freq.length===1&&q.length===1&&gain.length===1);if(_K2)this._L2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){if(_K2===false){const _u1=(freq[_h1]!==undefined)?freq[_h1]:freq[0];
const _M2=(q[_h1]!==undefined)?q[_h1]:q[0];const _n1=(gain[_h1]!==undefined)?gain[_h1]:gain[0];this._L2(_u1,_M2,_n1);}const _N2=this._A2*_g1[_h1]+this._B2*this._D2[c]+this._C2*this._E2[c]-this._y2*this._F2[c]-this._z2*this._G2[c];this._E2[c]=this._D2[c];this._D2[c]=_g1[_h1];this._G2[c]=this._F2[c];this._F2[c]=_N2;const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];_m1[_h1]=(_i1>0)?_g1[_h1]:_N2;}}return this._b1;}_L2(_O2,_P2,_Q2){if(_O2===this._H2&&_P2===this._I2&&_Q2===this._J2)return;const _R2=2*Math.PI*_O2/sampleRate;
const _S2=Math.cos(_R2);const _T2=Math.sqrt(_Q2);const alpha=Math.sin(_R2)/(2*_P2);const _83=alpha/_T2;const _93=alpha*_T2;const _03=1+_83;const _y2=-2*_S2;const _z2=1-_83;const _A2=1+_93;const _B2=_y2;const _C2=1-_93;this._y2=_y2/_03;this._z2=_z2/_03;this._A2=_A2/_03;this._B2=_B2/_03;this._C2=_C2/_03;this._H2=_O2;this._I2=_P2;this._J2=_Q2;}}registerProcessor("peak-eq-processor",_73);class _a3{constructor(_b3){this._c3=0;this._d3=0;this.feedback=0;this._e3=0;this.buffer=new Float32Array(_b3);this._f3=0;}process(_j2){
const out=this.buffer[this._f3];this._e3=(this._e3*this._c3)+(out*this._d3);this.buffer[this._f3]=_j2+(this._e3*this.feedback);++this._f3;this._f3%=this.buffer.length;return out;}_g3(_h3){this.feedback=Math.min(Math.max(0,_h3),1);}_i3(_j3){this._c3=Math.min(Math.max(0,_j3),1);this._d3=1-this._c3;}}class _k3{constructor(_b3){this.feedback=0;this.buffer=new Float32Array(_b3);this._f3=0;}process(_j2){const out=this.buffer[this._f3];this.buffer[this._f3]=_j2+(out*this.feedback);++this._f3;this._f3%=this.buffer.length;
return(out-_j2);}_g3(_h3){this.feedback=Math.min(Math.max(0,_h3),1);}}class _l3 extends AudioWorkletProcessor{static _m3=8;static _n3=4;static _o3=0.015;static _p3=0.4;static _q3=0.28;static _r3=0.7;static _s3=[1116,1188,1277,1356,1422,1491,1557,1617];static _t3=[1139,1211,1300,1379,1445,1514,1580,1640];static _u3=[556,441,341,225];static _v3=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];this._w3=-1;this._x3=-1;this._y3=new Array(_r1);this._z3=new Array(_r1);const _A3=[_l3._s3,_l3._t3];const _B3=[_l3._u3,_l3._v3];for(let c=0;c<_r1;++c){this._y3[c]=new Array(_l3._m3);this._z3[c]=new Array(_l3._n3);for(let i=0;i<_l3._m3;
++i)this._y3[c][i]=new _a3(_A3[c%_A3.length][i]);for(let i=0;i<_l3._n3;++i)this._z3[c][i]=new _k3(_B3[c%_B3.length][i]);}this._C3(0.5);this._i3(0.5);for(let c=0;c<_r1;++c)for(let i=0;i<_l3._n3;++i)this._z3[c][i]._g3(0.5);}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _D3=0;_D3<_g1.length;++_D3){const _h1=(size[_D3]!==undefined)?size[_D3]:size[0];
const _E3=(damp[_D3]!==undefined)?damp[_D3]:damp[0];this._C3(_h1);this._i3(_E3);_m1[_D3]=_g1[_D3];let out=0;const _v1=_g1[_D3]*_l3._o3;for(let i=0;i<_l3._m3;++i)out+=this._y3[c][i].process(_v1);for(let i=0;i<_l3._n3;++i)out=this._z3[c][i].process(out);const _i1=(bypass[_D3]!==undefined)?bypass[_D3]:bypass[0];if(_i1>0.0){continue;}const _x1=(mix[_D3]!==undefined)?mix[_D3]:mix[0];_m1[_D3]*=(1-_x1);_m1[_D3]+=(out*_x1);}}return this._b1;}_C3(_b3){if(_b3===this._w3)return;const size=(_b3*_l3._q3)+_l3._r3;for(let c=0;
c<this._y3.length;++c)for(let i=0;i<_l3._m3;++i)this._y3[c][i]._g3(size);this._w3=_b3;}_i3(_j3){if(_j3===this._x3)return;const damp=_j3*_l3._p3;for(let c=0;c<this._y3.length;++c)for(let i=0;i<_l3._m3;++i)this._y3[c][i]._i3(damp);this._x3=_j3;}}registerProcessor("reverb1-processor",_l3);class _F3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_q1){super();this._a1();const _r1=_q1.outputChannelCount[0];this._G3=new Array(_r1).fill(1.0);this._H3=new Array(_r1).fill(0.0);this._I3=new Array(_r1).fill(_J3._K3._L3);this._M3=new Array(_r1);for(let c=0;c<_r1;++c){this._M3[c]=new _N3();
this._M3[c]._O3(sampleRate);this._M3[c]._P3(this._G3[c]);this._M3[c]._Q3(this._I3[c]);if(c%2===1){this._M3[c]._R3(this._H3[c]);}}}process(_e1,_f1,parameters){const input=_e1[0];const output=_f1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _g1=input[c];const _m1=output[c];for(let _h1=0;_h1<_g1.length;++_h1){_m1[_h1]=_g1[_h1];const _w1=(rate[_h1]!==undefined)?rate[_h1]:rate[0];
const _S3=(offset[_h1]!==undefined)?offset[_h1]:offset[0];const _T3=(shape[_h1]!==undefined)?shape[_h1]:shape[0];this._U3(c,_w1,_S3,_T3);const _V3=this._M3[c]._b2();const _i1=(bypass[_h1]!==undefined)?bypass[_h1]:bypass[0];if(_i1>0.0){continue;}const i=(intensity[_h1]!==undefined)?intensity[_h1]:intensity[0];const out=_g1[_h1]*_V3*i;_m1[_h1]*=(1.0-i);_m1[_h1]+=out;}}return this._b1;}_U3(_d2,_W3,_X3,_Y3){if(_W3!==this._G3[_d2]){this._M3[_d2]._P3(_W3);this._G3[_d2]=_W3;}if(_X3!==this._H3[_d2]){if(_d2%2===1){
this._M3[_d2]._R3(_X3);}this._H3[_d2]=_X3;}if(_Y3!==this._I3[_d2]){this._M3[_d2]._Q3(_Y3);this._I3[_d2]=_Y3;}}}registerProcessor("tremolo-processor",_F3);function _J3(){}_J3._K3={_L3:0,_Z3:1,__3:2,_04:3,_14:4,_24:5};_J3._34=function(_44){return 1.0-_44;};_J3._54=function(_44){return _44;};_J3._64=function(_44){return 0.5*(Math.sin((_44*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_J3._74=function(_44){if(_44<0.5){return 0.0;}return 1.0;};_J3._84=function(_44){if(_44<0.5){return 2.0*_44;}return 2.0-(2.0*_44);};_J3._94=[_J3._34,
_J3._54,_J3._64,_J3._74,_J3._84];_a4._b4=512;_a4._c4=1.0/_a4._b4;function _a4(_d4){this.data=new Float32Array(_a4._b4);for(let i=0;i<_a4._b4;++i){this.data[i]=_d4(i*_a4._c4);}}_a4.prototype._b2=function(_44){_44=Math.max(0.0,_44);_44=Math.min(_44,1.0);const _e4=_44*_a4._b4;const _f4=~~_e4;const _g4=_e4-_f4;let _f2=_f4;let _g2=_f2+1;if(_f2>=_a4._b4){_f2-=_a4._b4;}if(_g2>=_a4._b4){_g2-=_a4._b4;}const _h2=this.data[_f2];const _i2=this.data[_g2];return _h2+(_i2-_h2)*_g4;};_N3._h4=[];_N3._i4=false;_N3._j4=0.0;_N3._x2=20.0;
function _N3(){this._k4=48000;this.shape=_J3._K3.__3;this.freq=1.0;this._l4=0.0;this._c4=0.0;this._m4=0.0;if(_N3._i4==true){return;}for(let i=0;i<_J3._K3._24;++i){_N3._h4[i]=new _a4(_J3._94[i]);}_N3._i4=true;}_N3._n4=function(){return(_N3._i4==true);};_N3.prototype._O3=function(_o4){this._k4=_o4;this._p4();};_N3.prototype._P3=function(_O2){_O2=Math.max(_N3._j4,_O2);_O2=Math.min(_O2,_N3._x2);this.freq=_O2;this._p4();};_N3.prototype._R3=function(_X3){_X3=Math.max(0.0,_X3);_X3=Math.min(_X3,1.0);const _q4=_X3-this._m4;
this._m4=_X3;this._l4+=_q4;while(this._l4>=1.0){this._l4-=1.0;}while(this._l4<0.0){this._l4+=1.0;}};_N3.prototype._Q3=function(_Y3){_Y3=Math.max(0,_Y3);_Y3=Math.min(_Y3,_J3._K3._24-1);this.shape=_Y3;};_N3.prototype._b2=function(){const result=_N3._h4[this.shape]._b2(this._l4);this._l4+=this._c4;while(this._l4>=1.0){this._l4-=1.0;}return result;};_N3.prototype._p4=function(){this._c4=this.freq/this._k4;};